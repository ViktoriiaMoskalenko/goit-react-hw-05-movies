{"version":3,"file":"static/js/311.e88ea789.chunk.js","mappings":"mTACMA,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,EAAAA,EAAAA,IAAA,qCAAwCF,IAD5D,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,uFACoBJ,EAAAA,EAAAA,IAAA,+BAAkCF,EAAlC,4DAA6FM,IADjH,cACGH,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,uFACoBN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,oBAAiCR,EAAjC,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,uFACoBN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,4BAAyCR,EAAzC,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAAmCF,GAAnC,uFACoBN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,4BAAyCR,EAAzC,oBADpB,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAtBPF,EAAAA,EAAAA,SAAAA,QAAyB,+B,6ICgCzB,MAzBA,WACE,OAAkCS,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OAPAE,EAAAA,EAAAA,YAAU,YACWP,EAAAA,EAAAA,IAAiBK,GAC7BG,MAAK,SAAAb,GACZS,EAAaT,EAAKc,KACnB,IACEC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GACf,GAAE,CAACN,IAEsB,IAArBF,EAAUW,QAAe,oDAAiC,eAAIC,UAAWC,EAAAA,EAAAA,UAAf,SAElDb,EAAUc,KAAI,gBAAEC,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,UAAtB,EAAiCrB,GAAjC,OACf,gBAAmBgB,UAAWC,EAAAA,EAAAA,UAA9B,WACQ,gBAAKK,IAAKH,EAlBb,kCAkBuCA,EAAeP,EAAOW,IAAMH,EAAOJ,UAAaC,EAAAA,EAAAA,gBACxF,iBAAKD,UAAWC,EAAAA,EAAAA,eAAhB,WACE,cAAGD,UAAWC,EAAAA,EAAAA,UAAd,SAAiCG,KACnC,eAAGJ,UAAWC,EAAAA,EAAAA,UAAd,wBAA6CI,UCTzC,eAACG,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC5B,EAAI6B,GAWvD,OARE7B,IAFF6B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDKCG,GADM,KAU1B,C","sources":["api/API.jsx","pages/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nconst API_KEY = '886b9d3802d0444fafb475c913f007ca'\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/'\n\nexport async function trendingMovie() {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`)\n    return response.data\n}\n\nexport async function searchMovie(value) {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${value}`)\n    return response.data\n}\n\nexport async function movieDetails(id) {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`)\n    return response.data\n}\n\nexport async function movieDetailsCast(id) {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`)\n    return response.data\n}\n\nexport async function movieDetailsReviews(id) {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US`)\n    return response.data\n}","import { useParams } from \"react-router-dom\";\nimport { useState, useEffect } from 'react'\nimport { nanoid } from 'nanoid'\nimport { movieDetailsCast } from '../api/API'\nimport styles from '../components/Movies.module.css'\nimport error from '../error.jpeg'\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w500'\n\nfunction Cast() {\n  const [dataMovie, setDataMovie] = useState([])\n  const { movieId } = useParams();\n  \n  useEffect(() => {\n      const response = movieDetailsCast(movieId)\n  response.then(data => {\n    setDataMovie(data.cast)\n  })\n    .catch(error => console.log(error))\n}, [movieId])\n  return (\n    (dataMovie.length === 0 ? <p>No information in Cast!</p> : <ul className={styles.cast_list}>\n      \n            {dataMovie.map(({profile_path, name, character, id}) =>\n            <li key={nanoid()} className={styles.cast_item}>\n                    <img src={profile_path ? BASE_URL + profile_path : error} alt={ name } className = {styles.cast_profile} />\n                <div className={styles.cast_wrap_desk}>\n                  <p className={styles.cast_desk}>{name}</p>\n                <p className={styles.cast_desk}>Character: { character }</p>\n                </div>\n            </li> )}\n    </ul>)\n)\n}\nexport default Cast;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["API_KEY","trendingMovie","axios","response","data","searchMovie","value","movieDetails","id","movieDetailsCast","movieDetailsReviews","useState","dataMovie","setDataMovie","movieId","useParams","useEffect","then","cast","catch","error","console","log","length","className","styles","map","profile_path","name","character","src","alt","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}